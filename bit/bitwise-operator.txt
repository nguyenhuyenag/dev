
- AND (&) -> Trả về True khi và chỉ khi cả hai toán hạng là True

		0 & 0 = 0
		1 & 1 = 1
		0 & 1 = 0
		1 & 0 = 0

	+ Chỉ khi nào 2 bit đều là 1 thì kết quả mới là 1, các trường hợp còn lại đều là 0.
	
		  3		0 1 1
		  5		1 0 1
		3 & 5	0 0 1	=	1

- OR (|) ->  Trả về True khi và chỉ khi ít nhất một toán hạng là True

		0 | 0 = 0
		1 | 1 = 1
		0 | 1 = 1
		1 | 0 = 1

	+ Như vậy chỉ cần 1 trong 2 bit là 1 thì kết quả trả về sẽ là 1.
	
		  3	  	=	0 1 1
		  5	  	=	1 0 1
		3 | 5	=	1 1 1 	=	7

- XOR (^) -> Trả về True khi và chỉ khi hai toán hạng có giá trị khác nhau

		0 ^ 0 = 0
		1 ^ 1 = 0
		0 ^ 1 = 1
		1 ^ 0 = 1

	+ Như vậy nếu 2 bit `giống nhau` thì cho kết quả 0 và `khác nhau` cho ra 1.
	
	+ Từ đó ta thấy nếu A ^ B = 0 thì A = B
	
		  3		=	0	1	1
		  5		=	1 	0 	1
		3 ^ 5	=	1 	1 	0	=	6

- Bảng chân trị (truh table)
	
	|---|---|-----|----|-----|
	| A | B | AND | OR | XOR |
	| 1 | 1 |  1  | 1  |  0  |
	| 1 | 0 |  0  | 1  |  1  |
	| 0 | 1 |  0  | 1  |  1  |
	| 0 | 0 |  0  | 0  |  0  |
	|---|---|-----|----|-----|

- NOT (~)

		~ 0 = 1
		~ 1 = 0
		
		~85 = -86
		
		 85 = 0000 0000 0000 0000 0000 0000 0101 0101
		~85 = 1111 1111 1111 1111 1111 1111 1010 1010 => -86


	+ Phép toán này còn được gọi là phép đảo bit

- Shift left (<<): Ta có x << k = x * 2^k

	Biểu diễn số 5 trong hệ nhị phân (32 bit)
	
		00000000 00000000 00000000 00000101	= 5

	Khi đó `5 << 3`, giá trị bit của 5 sẽ trở thành

		00000000 00000000 00000000 00101000 = 40

- Shift right (>>): Ta có x >> k = [x/2^k]























